[ {
  "id" : 131,
  "uri" : "https://zha-ge.cn/java/p0fe9bl3/",
  "title" : "Spring Boot的本质是什么？",
  "categoryId" : 5,
  "sortOrder" : 1,
  "answer" : "<p><strong>Spring Boot</strong> 是一个简化开发过程的框架，它让开发者能够<code>更快速</code>、<code>更高效地构建</code>、<code>测试和部署</code> <strong>Spring 应用</strong>。 它的目标是<strong>减少配置</strong>和<strong>部署</strong>的复杂性，让开发者专注于实现业务逻辑。 <strong>Spring Boot</strong> 通过<code>自动配置</code>、<code>内嵌服务器</code>以及<code>开箱即用</code>的默认配置，使得原本需要繁琐配置的 <code>Spring 应用</code>变得<strong>轻松易用</strong>。</p>"
}, {
  "id" : 132,
  "uri" : "https://zha-ge.cn/java/2zvjr7qw/",
  "title" : "Spring Boot的主要功能特性有哪些？",
  "categoryId" : 5,
  "sortOrder" : 2,
  "answer" : "<p><strong>Spring Boot</strong> 的核心特性包括：</p>\n<ul>\n <li>开箱即用，内嵌服务器；</li>\n <li>自动配置，免去繁琐的手动设置；</li>\n <li>支持 JAR 包独立运行；</li>\n <li>完善的生态支持，能够与 Spring 全家桶无缝集成；</li>\n <li>提供应用监控和健康检查功能，确保系统稳定性。</li>\n</ul>\n<p>这些特性让开发变得更高效、灵活。⚡</p>"
}, {
  "id" : 133,
  "uri" : "https://zha-ge.cn/java/1242gx91/",
  "title" : "Spring Boot如何利用main方法启动Web项目？",
  "categoryId" : 5,
  "sortOrder" : 3,
  "answer" : "<ol>\n <li><p><strong>启动入口</strong><br> Spring Boot 通过 <code>SpringApplication.run()</code> 启动应用，这是整个启动流程的入口。</p></li>\n <li><p><strong>创建应用上下文</strong><br> Spring Boot 创建应用上下文，并通过 <code>AnnotationConfigServletWebServerApplicationContext</code> 初始化 Web 环境。</p></li>\n <li><p><strong>启动内嵌 Web 服务器</strong><br> 在 <code>refreshContext()</code> 阶段，Spring Boot 启动内嵌的 Web 服务器，默认使用 <strong>Tomcat</strong>。</p></li>\n <li><p><strong>自动配置 Web 组件</strong><br> Spring Boot 通过 <code>@EnableAutoConfiguration</code> 自动配置 Web 组件，如 <code>DispatcherServlet</code>，极大地简化了配置过程。</p></li>\n <li><p><strong>请求处理</strong><br><code>DispatcherServlet</code> 负责接收并处理 HTTP 请求，随后将请求分发到相应的控制器。</p></li>\n</ol>\n<h3 id=\"关键注解-springbootapplication\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关键注解-springbootapplication\"><span>关键注解 <code>@SpringBootApplication</code></span></a></h3>\n<p><code>@SpringBootApplication</code> 注解在整个启动过程中起到了关键作用：</p>\n<ul>\n <li>启动了 <strong>自动配置机制</strong>，简化了大量手动配置的工作。</li>\n <li>启用了 <strong>组件扫描</strong>，自动发现并注册项目中的所有符合条件的组件。</li>\n</ul>"
}, {
  "id" : 134,
  "uri" : "https://zha-ge.cn/java/jjhdyuj8/",
  "title" : "Spring Boot自动配置的机制是什么？",
  "categoryId" : 5,
  "sortOrder" : 4,
  "answer" : "<p>Spring Boot 的自动配置是通过 <code>@EnableAutoConfiguration</code> 注解实现的，它导入了 <code>AutoConfigurationImportSelector</code> 类， 负责扫描 <code>classpath</code> 下的 <code>spring.factories</code> 文件并加载相关的自动配置类。 这些配置类通过条件注解（如 <code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissingBean</code>）来灵活控制何时加载配置。 在启动时，Spring Boot 会根据项目的依赖和环境条件，自动选择并注入合适的 Bean，简化了配置过程。</p>"
}, {
  "id" : 135,
  "uri" : "https://zha-ge.cn/java/7e46030u/",
  "title" : "Spring Boot支持哪些内置的Web容器？",
  "categoryId" : 5,
  "sortOrder" : 5,
  "answer" : "<p>Spring Boot 支持多种嵌入式 Web 容器，默认使用的是 <strong>Tomcat</strong>，但也可以轻松切换到其他容器，比如 <strong>Jetty</strong>、<strong>Undertow</strong> 或 <strong>Netty</strong>。这些容器各自有不同的特点和适用场景，开发者可以根据实际需求选择最合适的容器。</p>\n<ol>\n <li><strong>Tomcat</strong>（默认）：经典的、广泛使用的 Servlet 容器，适用于大多数 Java Web 应用。</li>\n <li><strong>Jetty</strong>：轻量级、适合高性能要求，尤其擅长长连接应用，如 WebSocket。</li>\n <li><strong>Undertow</strong>：性能优越，支持异步 IO 和 HTTP/2，适合高并发和低延迟的场景。</li>\n <li><strong>Netty</strong>：专为响应式编程设计，适合开发高并发、低延迟的应用，通常与 <strong>Spring WebFlux</strong> 一起使用。</li>\n</ol>"
}, {
  "id" : 136,
  "uri" : "https://zha-ge.cn/java/0rh754m2/",
  "title" : "Spring Boot中application.properties与application.yml的区别是什么？",
  "categoryId" : 5,
  "sortOrder" : 6,
  "answer" : "<p>在 Spring Boot 中，<code>application.properties</code> 和 <code>application.yml</code> 是用来配置应用的两种常见文件格式。它们的最大区别在于格式：</p>\n<ul>\n <li><strong>application.properties</strong> 使用的是简单的键值对方式（等号或冒号分隔）。</li>\n <li><strong>application.yml</strong> 则是使用 YAML 格式，支持层级结构，适合复杂配置。</li>\n</ul>\n<p>尽管格式不同，但它们实现的功能是一样的，选择哪个主要取决于个人或团队的编码习惯。</p>"
}, {
  "id" : 137,
  "uri" : "https://zha-ge.cn/java/zn0bsvsr/",
  "title" : "在Spring Boot中如何设置并获取自定义配置？",
  "categoryId" : 5,
  "sortOrder" : 7,
  "answer" : "<p>在 Spring Boot 中，定义和读取自定义配置的方式有多种。通常可以通过以下三种方式来实现：</p>\n<ol>\n <li><strong>使用 <code>@Value</code> 注解</strong></li>\n <li><strong>使用 <code>@ConfigurationProperties</code> 注解</strong></li>\n <li><strong>使用 <code>Environment</code> 接口</strong></li>\n</ol>\n<p>这三种方式都能有效地从配置文件（如 <code>application.properties</code> 或 <code>application.yml</code>）中读取自定义配置，具体选择哪种方式取决于配置的复杂度以及使用场景。</p>"
}, {
  "id" : 138,
  "uri" : "https://zha-ge.cn/java/1pjl2vjf/",
  "title" : "Spring Boot配置文件加载的优先级顺序是什么？",
  "categoryId" : 5,
  "sortOrder" : 8,
  "answer" : "<p>在 Spring Boot 中，配置文件的加载优先级非常重要，它决定了在多个配置源存在时，哪个配置会被应用。Spring Boot 按照以下顺序加载配置：</p>\n<ol>\n <li><strong>命令行参数</strong> \uD83D\uDCDD</li>\n <li><strong>JAR包外的 <code>application-{profile}.properties</code></strong> \uD83D\uDCC2</li>\n <li><strong>JAR包内的 <code>application-{profile}.properties</code></strong> \uD83D\uDCE6</li>\n <li><strong>JAR包外的 <code>application.properties</code></strong> \uD83D\uDCC2</li>\n <li><strong>JAR包内的 <code>application.properties</code></strong> \uD83D\uDCE6</li>\n</ol>\n<p>这意味着，若相同的配置项出现在多个配置文件中，优先级高的配置会覆盖优先级低的配置。</p>"
}, {
  "id" : 139,
  "uri" : "https://zha-ge.cn/java/q7ab5xla/",
  "title" : "Spring Boot打包的JAR与普通JAR有何不同？",
  "categoryId" : 5,
  "sortOrder" : 9,
  "answer" : "<p>Spring Boot 打包的 <strong>JAR</strong> 文件与普通的 <strong>JAR</strong> 文件有显著的区别。 Spring Boot 的 JAR 文件不仅包含应用程序的源代码和依赖库， 还嵌入了程序运行所需的配置、脚本和内嵌的 Web 服务器（如 <strong>Tomcat</strong>、<strong>Jetty</strong> 或 <strong>Undertow</strong>）。 这种 JAR 文件是 <strong>可执行的</strong>，可以独立运行。而普通的 JAR 文件仅包含应用的 <strong>字节码</strong> 和依赖，通常依赖外部的服务器或容器来运行。</p>"
}, {
  "id" : 140,
  "uri" : "https://zha-ge.cn/java/lrl2tc0n/",
  "title" : "Spring Boot是否支持使用XML进行配置？",
  "categoryId" : 5,
  "sortOrder" : 10,
  "answer" : "<p>虽然 Spring Boot 提倡 <strong>注解配置</strong> 和 <strong>属性文件</strong>，但它仍然支持传统的 <strong>XML 配置</strong>。这种支持主要是通过 <code>@ImportResource</code> 注解实现的，可以导入外部的 XML 配置文件，从而在 Spring Boot 应用中使用传统的 Spring 配置方式。</p>\n<p>在大多数情况下，Spring Boot 项目会避免使用 XML 配置，因为它主要面向现代开发风格，推荐使用 Java 配置和注解。然而，在一些特定的场景下（如迁移项目时），可能会出现 <strong>Java 配置</strong> 与 <strong>XML 配置</strong> 混合使用的情况。</p>"
}, {
  "id" : 141,
  "uri" : "https://zha-ge.cn/java/5mu2m0xm/",
  "title" : "Spring Boot默认的最大并发连接数是多少？",
  "categoryId" : 5,
  "sortOrder" : 11,
  "answer" : "<p>Spring Boot 默认使用 <strong>Tomcat</strong> 作为嵌入式 Web 容器。Tomcat 默认的最大连接数为 <strong>8192</strong>，但这并不是唯一的限制，因为 <strong>Tomcat</strong> 还包括一个 <strong>等待数</strong>。因此，Spring Boot 默认可以同时处理的最大连接数是 <strong>8192 + 100 = 8292</strong>。这些参数可以通过配置文件进行修改。</p>"
}, {
  "id" : 142,
  "uri" : "https://zha-ge.cn/java/ej5eukdo/",
  "title" : "Spring Boot中的Starter机制如何理解？",
  "categoryId" : 5,
  "sortOrder" : 12,
  "answer" : "<p><strong>Spring Boot 中的 Starter</strong> 是一组为开发者提供的便捷工具包，它集成了常用功能模块所需的所有依赖，减少了开发者手动配置和管理依赖的负担。通过引入一个 Starter 依赖，Spring Boot 会自动处理相关的配置和依赖，使得开发更加高效。</p>\n<h3 id=\"比喻\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#比喻\"><span>比喻：</span></a></h3>\n<p>可以将 Starter 比作一个“多功能工具箱”，其中包含了开发过程中常用的工具和配件。开发者只需“拿起工具箱”，便能立即开始工作，无需重新选择和配置每个工具。</p>"
}, {
  "id" : 143,
  "uri" : "https://zha-ge.cn/java/sajxu0we/",
  "title" : "Spring Boot如何处理跨域请求（CORS）？",
  "categoryId" : 5,
  "sortOrder" : 13,
  "answer" : "<p>Spring Boot 处理跨域请求的主要方式有以下几种，每种方式都能满足不同的需求：</p>\n<ol>\n <li><p><strong>局部配置 CORS</strong>：通过在 <code>Controller</code> 层使用 <code>@CrossOrigin</code> 注解，可以对单个方法或控制器进行跨域配置。这是最直接和简洁的方式。</p></li>\n <li><p><strong>全局配置 CORS</strong>：通过实现 <code>WebMvcConfigurer</code> 接口，并重写 <code>addCorsMappings</code> 方法，可以对整个应用程序进行统一的跨域配置。</p></li>\n <li><p><strong>使用 CorsFilter 处理跨域请求</strong>：Spring Boot 提供了 <code>CorsFilter</code>，开发者也可以使用它来配置跨域请求，甚至自定义 <code>Filter</code> 来满足特定需求。</p></li>\n</ol>"
}, {
  "id" : 144,
  "uri" : "https://zha-ge.cn/java/d5yaa4y5/",
  "title" : "在Spring Boot中如何实现拦截器的配置与使用？",
  "categoryId" : 5,
  "sortOrder" : 14,
  "answer" : "<p>在 Spring Boot 中，<strong>拦截器</strong>（Interceptor）是一种非常实用的工具，它可以帮助我们在处理 HTTP 请求的过程中执行额外的操作。比如：</p>\n<ul>\n <li>\uD83D\uDEE1️ <strong>权限校验</strong>：检查用户是否已经登录或是否有权限访问某些接口。</li>\n <li>\uD83D\uDCCA <strong>日志记录</strong>：记录每个请求的基本信息，如请求路径、请求时间等。</li>\n <li>⏱️ <strong>性能监控</strong>：统计每个请求的响应时间，帮助优化性能。</li>\n</ul>\n<h3 id=\"如何使用拦截器\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何使用拦截器\"><span>如何使用拦截器？</span></a></h3>\n<ol>\n <li><p><strong>创建拦截器类</strong>：需要创建一个类来实现 <code>HandlerInterceptor</code> 接口，并且实现里面的三个方法：<code>preHandle()</code>、<code>postHandle()</code> 和 <code>afterCompletion()</code>。</p>\n  <ul>\n   <li><code>preHandle()</code>：在请求到达 Controller 前执行，适合做权限检查。</li>\n   <li><code>postHandle()</code>：在 Controller 执行后，视图渲染前执行，可以修改返回的模型数据。</li>\n   <li><code>afterCompletion()</code>：在请求结束后执行，可以做一些资源清理操作。</li>\n  </ul></li>\n <li><p><strong>注册拦截器</strong>：通过实现 <code>WebMvcConfigurer</code> 接口并重写 <code>addInterceptors()</code> 方法，将拦截器注册到 Spring Boot 中。</p></li>\n</ol>\n<h3 id=\"简单示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简单示例\"><span>简单示例</span></a></h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\">\n <button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button>\n <pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">public</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">class</span><span class=\"space\"> </span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994;\">RequestInterceptor</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">implements</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">HandlerInterceptor</span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">Override</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">public</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">boolean</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">preHandle</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">HttpServletRequest</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">request</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">HttpServletResponse</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">response</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Object</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">handler</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">)</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">throws</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Exception</span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">{</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">\uD83D\uDEA6</span><span class=\"space\"> </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">请求开始前</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">);</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375;\">return</span><span class=\"space\"> </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375;\">true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">;</span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">//</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">返回</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">true</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">表示继续执行，返回</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">false</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">则拦截请求</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">Override</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">public</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">void</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">postHandle</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">HttpServletRequest</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">request</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">HttpServletResponse</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">response</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Object</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">handler</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">ModelAndView</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">modelAndView</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">)</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">throws</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Exception</span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">{</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">\uD83D\uDD04</span><span class=\"space\"> </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">请求处理后</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">);</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">Override</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">public</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">void</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">afterCompletion</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">HttpServletRequest</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">request</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">HttpServletResponse</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">response</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Object</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">handler</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">,</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Exception</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">exception</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">)</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">throws</span><span class=\"space\"> </span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">Exception</span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">{</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">✅</span><span class=\"space\"> </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">请求完成</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">);</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">}</span></span></code></pre>\n <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\">\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n </div>\n</div>\n<p>然后，在配置类中注册这个拦截器：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\">\n <button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button>\n <pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">Configuration</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">public</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">class</span><span class=\"space\"> </span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994;\">WebConfiguration</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">implements</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">WebMvcConfigurer</span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">Override</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">public</span><span class=\"space\"> </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676;\">void</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">addInterceptors</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;\">InterceptorRegistry</span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">registry</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">)</span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">{</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A;\">registry</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">addInterceptor</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375;\">new</span><span class=\"space\"> </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">RequestInterceptor</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">()).</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665;\">addPathPatterns</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D;\">/api/**</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77;\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">);</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">//</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">只拦截</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">/api/**</span><span class=\"space\"> </span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD;\">路径的请求</span></span>\n<span class=\"line\"><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span class=\"space\"> </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666;\">}</span></span></code></pre>\n <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\">\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n  <div class=\"line-number\"></div>\n </div>\n</div>"
}, {
  "id" : 145,
  "uri" : "https://zha-ge.cn/java/4m3kuzty/",
  "title" : "Spring Boot中定时任务的实现方式有哪些？",
  "categoryId" : 5,
  "sortOrder" : 15,
  "answer" : "<p>在 Spring Boot 中，定时任务的实现非常简单，只需使用 <code>@Scheduled</code> 注解，并开启定时任务功能。 通过 <code>@Scheduled</code> 可以轻松配置定时任务的执行周期，如固定间隔、延迟执行或使用 cron 表达式进行灵活配置。 定时任务是基于 Spring 提供的调度器执行的，可以通过简单配置来管理任务的执行。</p>"
}, {
  "id" : 146,
  "uri" : "https://zha-ge.cn/java/3vrmyeba/",
  "title" : "Spring Actuator的定义及其优势是什么？",
  "categoryId" : 5,
  "sortOrder" : 16,
  "answer" : "<p><strong>Spring Boot Actuator</strong> 是 <code>Spring Boot</code> 提供的一个强大的<strong>监控工具</strong>，可以让开发者轻松地<strong>管理</strong>和<strong>监控</strong>应用的状态。 它帮助你获取关于应用运行时的信息，如<code>健康状况、度量指标、日志级别和环境配置</code>等。 通过 <strong>Actuator</strong>，您可以轻松跟踪<strong>应用的性能、管理配置，甚至进行故障排查</strong>。 最重要的是，它允许您快速集成外部监控系统，使得管理变得更加便捷和高效。\uD83D\uDD27</p>"
}, {
  "id" : 147,
  "uri" : "https://zha-ge.cn/java/ano020am/",
  "title" : "Spring Boot 3.x与2.x版本的主要区别和改进是什么？",
  "categoryId" : 5,
  "sortOrder" : 17,
  "answer" : "<p><strong>Spring Boot 3.x</strong> 带来了许多令人兴奋的新特性，比如对<code>Jakarta EE 的支持、JDK 17 的最低要求、原生编译支持、更强的观察性、 安全性</code>提升以及更清爽的<code>依赖管理</code>。这些改进让 <strong>Spring Boot 3.x</strong> 成为现代云原生开发的利器！</p>"
}, {
  "id" : 148,
  "uri" : "https://zha-ge.cn/java/2tqug1l4/",
  "title" : "你对Spring Boot事件机制的理解是什么？",
  "categoryId" : 5,
  "sortOrder" : 18,
  "answer" : "<p>Spring Boot 的事件机制就像是一个“消息广播系统”，让不同的组件可以通过“发消息”和“收消息”来交流， 而不需要直接互相依赖。这样一来，代码更灵活、更容易维护，还能支持异步处理，让应用跑得更快！</p>"
}, {
  "id" : 149,
  "uri" : "https://zha-ge.cn/java/a0mp5jfg/",
  "title" : "在Spring Boot中如何配置多个数据源？",
  "categoryId" : 5,
  "sortOrder" : 19,
  "answer" : "<p>在 <strong>Spring Boot</strong> 中实现<strong>多数据源配置</strong>，其实就是为每个数据库单独配置一套“连接工厂”和“事务管理器”， 然后通过注解指定用哪个数据源。这样一来，你的应用就能同时操作多个数据库，互不干扰！你需要做以下几件事：</p>\n<ol>\n <li><strong>在配置文件中定义多个数据源</strong>：为每个数据库配置连接信息。</li>\n <li><strong>为每个数据源配置独立的 DataSource、SqlSessionFactory 和 TransactionManager</strong>：确保每个数据源有自己的“连接工厂”和“事务管理器”。</li>\n <li><strong>配置 Mapper 扫描路径</strong>：为每个数据源指定独立的 Mapper 包路径。</li>\n <li><strong>使用 @Transactional 指定事务管理器</strong>：在业务代码中明确使用哪个数据源的事务管理器。</li>\n</ol>"
}, {
  "id" : 150,
  "uri" : "https://zha-ge.cn/java/tvwo68q9/",
  "title" : "Spring Boot中异步处理的实现方法是什么？",
  "categoryId" : 5,
  "sortOrder" : 20,
  "answer" : "<p>在开发中，有些任务比较耗时，比如发送邮件或调用外部接口。如果让这些任务在主线程中执行，可能会导致程序卡顿。Spring Boot 提供了多种异步处理方式，让任务在后台运行，主线程继续流畅工作。</p>\n<p>具体来说，Spring Boot 中实现异步处理主要有四种方式：</p>\n<ol>\n <li><strong>使用 <code>@Async</code> 注解</strong>：简单易用，适合快速实现异步任务。</li>\n <li><strong>使用 <code>CompletableFuture</code></strong>：适合需要返回结果的异步任务。</li>\n <li><strong>使用 <code>@Scheduled</code> 注解</strong>：适合定时执行的周期性任务。</li>\n <li><strong>使用线程池</strong>：灵活控制异步任务的执行方式。</li>\n</ol>"
}, {
  "id" : 151,
  "uri" : "https://zha-ge.cn/java/ni5cvw56/",
  "title" : "Spring Boot启动时执行特定代码的方式有哪些？",
  "categoryId" : 5,
  "sortOrder" : 21,
  "answer" : "<p>在 Spring Boot 应用启动时，我们经常需要执行一些初始化任务，比如加载配置、初始化缓存或启动后台任务。Spring Boot 提供了多种方式来实现这一需求，以下是六种常见的方式：</p>\n<ol>\n <li><strong>实现 <code>CommandLineRunner</code> 接口</strong>：适合在应用启动后执行简单任务。\uD83D\uDCDC</li>\n <li><strong>实现 <code>ApplicationRunner</code> 接口</strong>：与 <code>CommandLineRunner</code> 类似，但支持更复杂的启动参数处理。\uD83D\uDEE0️</li>\n <li><strong>使用 <code>@PostConstruct</code> 注解</strong>：在 Bean 初始化后立即执行代码。\uD83D\uDD27</li>\n <li><strong>实现 <code>InitializingBean</code> 接口</strong>：在 Bean 属性设置完成后执行初始化逻辑。⚙️</li>\n <li><strong>使用 Spring 事件监听器</strong>：监听 <code>ContextRefreshedEvent</code> 事件，在应用上下文刷新后执行代码。\uD83C\uDFA7</li>\n <li><strong>自定义 <code>BeanFactoryPostProcessor</code> 和 <code>BeanPostProcessor</code></strong>：在 Bean 初始化前后执行特定逻辑。\uD83D\uDD0D</li>\n</ol>\n<p>接下来，我们详细解析每种方式的实现及其适用场景。</p>"
}, {
  "id" : 152,
  "uri" : "https://zha-ge.cn/java/mtcdn975/",
  "title" : "为什么在Spring Boot中不建议使用@Autowired注解？",
  "categoryId" : 5,
  "sortOrder" : 22,
  "answer" : "<p>在 Spring Boot 开发中，虽然 <code>@Autowired</code> 注解用起来很方便，但它并不是最佳实践。主要原因有以下几点：</p>\n<ol>\n <li><strong>与 Spring 强绑定</strong>：<code>@Autowired</code> 是 Spring 特有的注解，导致代码与 Spring 框架紧密耦合，难以迁移到其他 IOC 容器。</li>\n <li><strong>字段注入的隐患</strong>：字段注入容易引发空指针问题，且无法保证依赖的不可变性。</li>\n <li><strong>职责不清晰</strong>：字段注入过于便捷，可能导致类依赖过多，违反单一职责原则。</li>\n</ol>\n<p>Spring 官方更推荐使用 <strong>构造器注入</strong>，因为它更安全、更易于测试，并且符合设计原则。</p>"
}, {
  "id" : 153,
  "uri" : "https://zha-ge.cn/java/22nz5ncs/",
  "title" : "Spring Boot的核心注解是什么？它由哪些关键注解构成？",
  "categoryId" : 5,
  "sortOrder" : 23,
  "answer" : "<p>Spring Boot 的核心注解是 <code>@SpringBootApplication</code>，它通常标注在启动类上。这个注解是一个组合注解，主要由以下三个注解组成：</p>\n<ol>\n <li><strong><code>@SpringBootConfiguration</code></strong>：标记当前类为配置类，相当于 <code>@Configuration</code>。</li>\n <li><strong><code>@EnableAutoConfiguration</code></strong>：启用 Spring Boot 的自动配置功能。</li>\n <li><strong><code>@ComponentScan</code></strong>：自动扫描并注册 Spring 组件（如 <code>@Component</code>、<code>@Service</code> 等）。</li>\n</ol>\n<p>通过 <code>@SpringBootApplication</code>，Spring Boot 可以自动完成配置、组件扫描和依赖注入，极大地简化了开发流程。</p>"
}, {
  "id" : 154,
  "uri" : "https://zha-ge.cn/java/0ymf3nq7/",
  "title" : "Spring Boot的运行方式有哪些？",
  "categoryId" : 5,
  "sortOrder" : 24,
  "answer" : "<p>运行 Spring Boot 应用主要有以下三种方式：</p>\n<ol>\n <li><strong>打包后用命令或容器运行</strong>：将应用打包成 JAR 或 WAR 文件，通过命令行或容器（如 Tomcat）运行。</li>\n <li><strong>使用 Maven/Gradle 插件运行</strong>：通过 Maven 或 Gradle 插件直接运行应用。</li>\n <li><strong>直接执行 main 方法运行</strong>：在 IDE 中直接运行启动类的 <code>main</code> 方法。</li>\n</ol>\n<p>每种方式都有其适用场景，开发者可以根据需求选择最合适的方式。</p>"
}, {
  "id" : 155,
  "uri" : "https://zha-ge.cn/java/jkgpm4ih/",
  "title" : "如何在Spring Boot中实现统一的异常处理？",
  "categoryId" : 5,
  "sortOrder" : 25,
  "answer" : "<p>在 Spring Boot 中，异常处理可以通过 <code>@ControllerAdvice</code> 注解实现。<code>@ControllerAdvice</code> 是一个全局异常处理机制， 允许你集中处理控制器层抛出的所有异常。通过结合 <code>@ExceptionHandler</code> 注解，你可以为不同类型的异常定义统一的处理逻辑。</p>"
}, {
  "id" : 156,
  "uri" : "https://zha-ge.cn/java/4s4cnyay/",
  "title" : "Spring Boot中常见的Starter有哪些？",
  "categoryId" : 5,
  "sortOrder" : 26,
  "answer" : "<p>Spring Boot 提供了丰富的 Starter 依赖，帮助开发者快速集成各种功能模块。以下是一些常用的 Starter：</p>\n<ol>\n <li><strong><code>spring-boot-starter-web</code></strong>：用于开发 Web 应用，嵌入 Tomcat 并支持 Servlet 和 JSP。</li>\n <li><strong><code>spring-boot-starter-data-jpa</code></strong>：提供对 JPA（Java Persistence API）的支持，简化数据库操作。</li>\n <li><strong><code>spring-boot-starter-data-redis</code></strong>：集成 Redis 数据库，支持缓存和数据存储。</li>\n <li><strong><code>spring-boot-starter-data-solr</code></strong>：集成 Apache Solr，支持全文搜索功能。</li>\n <li><strong><code>mybatis-spring-boot-starter</code></strong>：第三方 MyBatis 集成 Starter，简化 MyBatis 配置。</li>\n</ol>\n<p>这些 Starter 极大地简化了 Spring Boot 应用的开发，让开发者可以专注于业务逻辑。</p>"
}, {
  "id" : 157,
  "uri" : "https://zha-ge.cn/java/zitarfad/",
  "title" : "Spring Boot实现热部署的方法有哪些？",
  "categoryId" : 5,
  "sortOrder" : 27,
  "answer" : "<p>在 Spring Boot 中，热部署（Hot Deployment）可以让开发者在修改代码后无需重启应用即可看到效果，极大地提高了开发效率。Spring Boot 提供了两种主要的热部署方式：</p>\n<ol>\n <li><strong>Spring Loaded</strong>：一个开源的热部署工具，支持类和方法级别的热更新。</li>\n <li><strong>Spring-boot-devtools</strong>：Spring Boot 官方提供的开发工具，支持快速重启和静态资源热加载。</li>\n</ol>\n<p>接下来，我们将详细介绍这两种方式的使用方法和适用场景。</p>"
}, {
  "id" : 158,
  "uri" : "https://zha-ge.cn/java/ccwm3ayi/",
  "title" : "如何实现Spring Boot与ActiveMQ的集成？",
  "categoryId" : 5,
  "sortOrder" : 28,
  "answer" : "<p>集成 Spring Boot 和 ActiveMQ 非常简单，只需引入 <code>spring-boot-starter-activemq</code> 依赖， 并进行少量配置即可。Spring Boot 会自动配置 ActiveMQ 的连接工厂、JMS 模板等组件，开发者无需编写样板代码。</p>"
} ]